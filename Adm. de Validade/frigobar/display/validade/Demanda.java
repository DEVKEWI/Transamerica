/*
 * Projeto destribuido por DEVKEWI COMPANY - Todos os direitos reservados.
 * Para alteração do código fonte estará disposto a concordar com termos.
 */
package frigobar.display.validade;

import frigobar.display.Menu;
import frigobar.manager.Estado;
import frigobar.manager.FileManager;
import java.awt.Toolkit;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JComboBox;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import me.kewi.Frigobar;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;

/**
 *
 * @author DEVKEWI COMPANY - Kewilleen
 */
public class Demanda extends javax.swing.JFrame {

    private frigobar.manager.Validation v = Frigobar.getValidation();
    private Menu m = v.getMenu();
    private FileManager fm = v.getFileManager();
    private Date agora;

    /**
     * Base inicial dos componentes
     */
    public Demanda() {
        Frigobar.getValidation().minimizar(this);
        Calendar c = Calendar.getInstance();
        c.set(Calendar.HOUR_OF_DAY, 0);
        c.set(Calendar.MINUTE, 0);
        c.set(Calendar.SECOND, 0);
        c.set(Calendar.MILLISECOND, 0);
        agora = c.getTime();
        initComponents();
        setLocationRelativeTo(null);
        tAlmox.setText(convertDate(Calendar.getInstance().getTime()));
        c.add(Calendar.DAY_OF_MONTH, 30);
        tValidade.setText(convertDate(c.getTime()));
    }

    /**
     *
     * @return Lista de produtos
     */
    public JComboBox getProdutos() {
        return tProduto;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        lProduto = new javax.swing.JLabel();
        lLote = new javax.swing.JLabel();
        lQnt = new javax.swing.JLabel();
        lTAlmox = new javax.swing.JLabel();
        lValidade = new javax.swing.JLabel();
        tProduto = new javax.swing.JComboBox();
        tLote = new javax.swing.JTextField();
        tQnt = new javax.swing.JTextField();
        tAlmox = new javax.swing.JFormattedTextField();
        tValidade = new javax.swing.JFormattedTextField();
        bCadastrar = new javax.swing.JButton();
        bMenuBar = new javax.swing.JMenuBar();
        bMenu = new javax.swing.JMenu();
        bVoltar = new javax.swing.JMenu();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Inserir demanda");
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/frigobar/imagens/Icon/logo16x16.png")));

        lProduto.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lProduto.setText("Produto");

        lLote.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lLote.setText("Lote");

        lQnt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lQnt.setText("Qnt.");

        lTAlmox.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lTAlmox.setText("T. Almox.");

        lValidade.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lValidade.setText("Validade");

        tLote.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        tQnt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        try {
            tAlmox.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        tAlmox.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        try {
            tValidade.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        tValidade.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        bCadastrar.setText("Cadastrar Vencimento");
        bCadastrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bCadastrarMouseClicked(evt);
            }
        });

        bMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/frigobar/imagens/Icon/home16x16.png"))); // NOI18N
        bMenu.setText("Menu");
        bMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bMenuMouseClicked(evt);
            }
        });
        bMenuBar.add(bMenu);

        bVoltar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/frigobar/imagens/Icon/back16x16.png"))); // NOI18N
        bVoltar.setText("Voltar");
        bVoltar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bVoltarMouseClicked(evt);
            }
        });
        bMenuBar.add(bVoltar);

        setJMenuBar(bMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(bCadastrar))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lProduto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tLote)
                            .addComponent(lLote, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tQnt)
                            .addComponent(lQnt, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tAlmox)
                            .addComponent(lTAlmox, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(tValidade, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lValidade, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(30, 30, 30))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lProduto)
                    .addComponent(lLote)
                    .addComponent(lQnt)
                    .addComponent(lTAlmox)
                    .addComponent(lValidade))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tLote, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tQnt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tAlmox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tValidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bCadastrar)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bMenuMouseClicked
        this.setVisible(false);
        m.setVisible(true);
    }//GEN-LAST:event_bMenuMouseClicked

    private void bVoltarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bVoltarMouseClicked
        Validation display = this.v.getValidation();
        this.setVisible(false);
        display.setVisible(true);
    }//GEN-LAST:event_bVoltarMouseClicked

    private void bCadastrarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bCadastrarMouseClicked
        try {
            DateFormat df = DateFormat.getDateInstance();
            String almox = convertField(tAlmox.getText());
            for (String split : almox.split("/")) {
                if (split.replace("  ", "").isEmpty()) {
                    Frigobar.sendInfo(2, "A data (T.Almox.) não pode ser em branco", "Data irregular");
                    return;
                }
            }
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            Date t = sdf.parse(almox);
            if (!isValid(t)) {
                System.out.println(isValid(t));
                Frigobar.sendInfo(2, "A data de transferência é inferior a de hoje.<br>Hoje: " + convertDate(Calendar.getInstance().getTime()) + "<br>T.Almox.: " + convertDate(t), "Data irregular");
                return;
            }
            String validade = convertField(tValidade.getText());
            for (String split : validade.split("/")) {
                if (split.replace("  ", "").isEmpty()) {
                    Frigobar.sendInfo(2, "A data (validade) não pode ser em branco", "Data irregular");
                    return;
                }
            }
            Date d = sdf.parse(validade);
            if (!isValid(t, d)) {
                Frigobar.sendInfo(2, "A data da validade deve ser trinta dias superior a da T.Almox!<br>Exemplo:<br>T.Almox.: " + almox + "<br>Validade: " + convertField(convertDate(nextMonth(sdf.parse(almox)))),
                        "Data irregular");
                return;
            }
            String lote = tLote.getText();
            if (lote.isEmpty()) {
                Frigobar.sendInfo(2, "Lote não deve estar em branco", "Lote irregular");
                return;
            }
            String qnt = tQnt.getText();
            if (qnt.isEmpty()) {
                Frigobar.sendInfo(2, "Quantidade do produto não deve estar em branco", "Quantidade irregular");
                return;
            }
            boolean l = Frigobar.isNumeric(lote);
            if (!l || !Frigobar.isNumeric(qnt)) {
                Frigobar.sendInfo(2, (!l ? "Lote" : "Quantidade") + " deve ser númerico", (!l ? "Lote" : "Quantidade") + " irregular");
                return;
            }
            String produto = (String) tProduto.getSelectedItem();
            System.out.println("Produto: " + produto);
            System.out.println("Lote: " + lote);
            System.out.println("Qnt: " + qnt);
            System.out.println("T.Almox.: " + almox);
            System.out.println("Validade: " + validade);
            String code = v.getProduto().getAlmoxPorNome(produto);
            System.out.println("Code Almox.: " + code);
            double id = v.getValidade().getId();
            v.getValidade().setValidade(id, produto, code, Integer.parseInt(lote), Integer.parseInt(qnt), almox, validade, Estado.PENDENTE);
            JTable table = v.getValidation().getTable();
            TableModel tm = table.getModel();
            DefaultTableModel dtm = (DefaultTableModel) tm;
            dtm.addRow(new Object[]{(int) id, produto, Integer.parseInt(lote), Integer.parseInt(qnt), almox, validade});
            insertExcel(id, produto, Double.parseDouble(lote), Double.parseDouble(qnt), almox, validade);
            Frigobar.sendInfo(5, "Você inseriu o produto \"" + produto + "\" com validade para dia " + validade, "Completo");
            tLote.setText("");
            tQnt.setText("");
        } catch (ParseException ex) {
            Frigobar.sendInfo(0, ex.getMessage(), "Erro");
        }

    }//GEN-LAST:event_bCadastrarMouseClicked

    private void insertExcel(double id, String produto, double lote, double qnt, String almox, String validade) {
        try {
            FileInputStream fis = new FileInputStream(fm.getData());
            Workbook w = new HSSFWorkbook(fis);
            Sheet s = w.getSheetAt(0);
            Row r = s.createRow((int) id);
            r.createCell(0).setCellValue(id);
            r.createCell(1).setCellValue(produto);
            r.createCell(2).setCellValue(lote);
            r.createCell(3).setCellValue(qnt);
            r.createCell(4).setCellValue(almox);
            r.createCell(5).setCellValue(validade);
            r.createCell(6).setCellValue("PENDENTE");
            FileOutputStream fos = new FileOutputStream(fm.getData());
            w.write(fos);
            fos.close();
            w.close();
        } catch (IOException ex) {
            Frigobar.sendInfo(0, ex.getMessage(), "Erro");
        }
        v.getValidade().setId(id + 1);
    }

    /**
     *
     * @param date
     * @return Certifica-se se o periodo de agora é menor que a data comparada
     */
    public boolean isValid(Date date) {
        return agora.getTime() < (date.getTime() + 1);
    }

    /**
     *
     * @param almox
     * @param validade
     * @return se o tempo de validade é maior que a data de entrada no almox.
     */
    public boolean isValid(Date almox, Date validade) {
        return !(nextMonth(almox).getTime() > validade.getTime());
    }

    /**
     *
     * @param base
     * @return Avanca um mes
     */
    public Date nextMonth(Date base) {
        Calendar c = Calendar.getInstance();
        c.setTime(base);
        c.add(Calendar.DAY_OF_MONTH, 30);
        Date d = c.getTime();
        return d;
    }

    /**
     *
     * @param d
     * @return Formato da data para dd/MM/yy
     */
    public String convertDate(Date d) {
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yy");
        return sdf.format(d);
    }

    private String convertField(String string) {
        String[] split = string.split("/");
        String almox = "";
        split[2] = "20" + split[2];
        for (String split1 : split) {
            almox = almox + "/" + split1;
        }
        almox = almox.substring(1, almox.length());
        return almox;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bCadastrar;
    private javax.swing.JMenu bMenu;
    private javax.swing.JMenuBar bMenuBar;
    private javax.swing.JMenu bVoltar;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel lLote;
    private javax.swing.JLabel lProduto;
    private javax.swing.JLabel lQnt;
    private javax.swing.JLabel lTAlmox;
    private javax.swing.JLabel lValidade;
    private javax.swing.JFormattedTextField tAlmox;
    private javax.swing.JTextField tLote;
    private javax.swing.JComboBox tProduto;
    private javax.swing.JTextField tQnt;
    private javax.swing.JFormattedTextField tValidade;
    // End of variables declaration//GEN-END:variables

}
